📦「ラーメン屋で注文を出すと、すぐ出てくるわけじゃないよね？」
🍜「その間にスマホ見たり、水飲んだり、別のことできる」
→ これが 非同期！

A: 注文する
C: 水を飲む
（2秒後）
B: ラーメン完成！


「JavaScriptは基本的に1行ずつ順番に実行されるけど、APIを呼んだり、ファイルを読んだり、何かを待つ必要があると、一旦その処理を後回しにして、先に進んでしまう。
それが非同期処理。
でもその処理が終わったら、また続きの処理を実行したいよね？
そこで登場するのが Promise です。」

「非同期処理は “あとで終わる処理” だったよね。
でも、終わったタイミングで何をしたいかを指定したいよね？
→ それを実現するのが Promise というオブジェクト！」


状態	内容
pending	保留中（まだ終わっていない）
fulfilled	成功（resolveされた）resolve は「成功したらこれを呼んでね！」という約束された関数
rejected	失敗（rejectされた）reject は「失敗したらこれを呼んでね！」という約束された関数

axios.get(...) も内部では Promise を返している

await は「Promiseの中身を待つ」という意味

fetch, setTimeout, async関数 すべて Promise ベース

resolveやrejectは本来axiosが内部的にステータスコードなどで条件を決めてPromiseの内部結果を処理している
fetchはネットワークが通った時点でresolveされ、okという変数を返すので、自分でokがないときのエラーハンドリング（throw new Error）をする必要あり

await 使ったら、原則 try/catch で囲おう。事故防止・バグ防止の基本です！

